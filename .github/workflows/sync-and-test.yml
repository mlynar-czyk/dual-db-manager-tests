name: Sync and Test

on:
  repository_dispatch:
    types: [sync-and-test, pre-release-test]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

jobs:
  sync-source:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      statuses: write
    outputs:
      coverage: ${{ steps.test.outputs.coverage }}
    steps:
      - name: Checkout test repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync source code
        env:
          SOURCE_REPO: ${{ github.event.client_payload.source_repo || github.repository_owner }}/dual-db-manager
        run: |
          # Remove existing source directory
          rm -rf src
          
          # Clone source repository
          git clone --depth 1 https://github.com/${SOURCE_REPO}.git temp_source
          
          # Copy source files
          if [ -d "temp_source/src" ]; then
            cp -r temp_source/src .
          elif [ -d "temp_source/lib" ]; then
            mkdir -p src
            cp -r temp_source/lib/* src/
          elif [ -d "temp_source/app" ]; then
            mkdir -p src  
            cp -r temp_source/app/* src/
          else
            # Fallback: copy Python files from root
            mkdir -p src
            find temp_source -name "*.py" -not -path "*/test*" -not -path "*/.git/*" -exec cp {} src/ \;
          fi
          
          # Clean up
          rm -rf temp_source
          
          # Commit changes if any
          git add -A
          if ! git diff --cached --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: sync source code from main repository"
            git push
          fi

      - name: Setup Python matrix
        uses: actions/setup-python@v5
        with:
          python-version: |
            3.8
            3.9
            3.10
            3.11
            3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-test.txt
          # Install source dependencies if they exist
          if [ -f "../pyproject.toml" ]; then
            pip install -e .
          fi

      - name: Run tests
        id: test
        run: |
          # Run tests with coverage
          pytest --cov=src --cov-report=term --cov-report=xml --cov-report=html --junitxml=test-results.xml || true
          
          # Extract coverage percentage
          coverage_percent=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "coverage=${coverage_percent}" >> $GITHUB_OUTPUT
          
          # Check against threshold
          threshold=80
          if (( $(echo "$coverage_percent < $threshold" | bc -l) )); then
            echo "❌ Coverage ${coverage_percent}% is below threshold ${threshold}%"
            exit 1
          else
            echo "✅ Coverage ${coverage_percent}% meets threshold ${threshold}%"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results.xml
          retention-days: 30

      - name: Report status to source repository
        if: github.event_name == 'repository_dispatch'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sourceRepo = '${{ github.event.client_payload.source_repo }}';
            const [owner, repo] = sourceRepo.split('/');
            const sha = '${{ github.event.client_payload.sha }}';
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: '${{ job.status }}',
              context: 'Test Results',
              description: 'Test execution completed',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });
            
            await github.rest.repos.createCommitStatus({
              owner,
              repo,
              sha,
              state: '${{ steps.test.outcome }}',
              context: 'Coverage Report',
              description: 'Coverage: ${{ steps.test.outputs.coverage }}%',
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });